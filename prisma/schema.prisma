// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String
    role              Role                @default(STUDENT)
    email             String?             @unique
    emailVerified     DateTime?
    phone             String?
    details           String?             @db.Text
    image             String?
    compantId         String?
    company           MainCompany?        @relation(fields: [compantId], references: [id])
    accounts          Account[]
    sessions          Session[]
    Page              Page[]
    Course            Course[]
    TeacherEnrollment TeacherEnrollment[]
    StudentEnrollment StudentEnrollment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Company {
    JIC
    THE_STUDY_GROUP
    THE_STUDY_TRIAM
    DEKTHAI
}

model MainCompany {
    id     String   @id @default(cuid())
    name   Company
    Course Course[]
    User   User[]
}

model TeacherEnrollment {
    id       String @id @default(cuid())
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum StudentEnrollmentStatus {
    PENDING
    APPROVED
    REJECTED
}

model StudentEnrollment {
    id       String                  @id @default(cuid())
    userId   String
    user     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId String
    course   Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
    status   StudentEnrollmentStatus @default(PENDING)
}

model Course {
    id                String              @id @default(cuid())
    pageId            String
    page              Page                @relation(fields: [pageId], references: [id])
    companyId         String
    company           MainCompany         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    published         Boolean             @default(false)
    approverId        String?
    approver          User?               @relation(fields: [approverId], references: [id], onDelete: Cascade)
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    Lesson            Lesson[]
    TeacherEnrollment TeacherEnrollment[]
    StudentEnrollment StudentEnrollment[]
}

model Lesson {
    id        String   @id @default(cuid())
    pageId    String
    page      Page     @relation(fields: [pageId], references: [id])
    courseId  String
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Page {
    id        String   @id @default(cuid())
    name      String
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])
    detail    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Course    Course[]
    Lesson    Lesson[]
}

enum Role {
    ADMIN
    EMPLOYEE
    TEACHER
    STUDENT
}
