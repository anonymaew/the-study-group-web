// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Company {
    JIC
    THE_STUDY_GROUP
    THE_STUDY_TRIAM
    DEKTHAI
}

model MainCompany {
    id       String     @id @default(cuid())
    name     Company
    Course   Course[]
    Teacher  Teacher[]
    Employee Employee[]
}

model Course {
    id         String      @id @default(cuid())
    name       String
    detail     String?
    teacherId  String
    teacher    Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    companyId  String
    company    MainCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
    employeeId String
    employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    createdAt  DateTime    @default(now())
}

model Teacher {
    id          String      @id @default(cuid())
    name        String
    description String?
    companyId   String
    company     MainCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
    Course      Course[]
}

model Employee {
    id           String       @id @default(cuid())
    name         String
    birthday     DateTime?
    phone        String?
    companyId    String?
    company      MainCompany? @relation(fields: [companyId], references: [id], onDelete: Cascade)
    permissionId String?
    permission   Permission?  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    Course       Course[]
}

enum PermissionRole {
    ADMIN
    STAFF
}

model Permission {
    id       String         @id @default(cuid())
    role     PermissionRole
    Employee Employee[]
}
